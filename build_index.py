#!/usr/bin/env python3
"""Build index page from gathered tool metadata."""
import json
import shutil
import subprocess
from collections import defaultdict
from dataclasses import dataclass
from datetime import datetime
from pathlib import Path
from typing import Optional

import yaml


@dataclass
class Commit:
    """Git commit information."""
    hash: str
    short_hash: str
    author: str
    date: str
    message: str


def load_config() -> dict:
    """Load configuration from _config.yml."""
    config_path = Path('_config.yml')
    if not config_path.exists():
        return {}

    with open(config_path, 'r') as f:
        return yaml.safe_load(f) or {}


def load_tools() -> list[dict]:
    """Load tools from tools.json generated by gather_links.py."""
    tools_path = Path('tools.json')

    if not tools_path.exists():
        print("Warning: tools.json not found. Run gather_links.py first.")
        return []

    with tools_path.open('r', encoding='utf-8') as f:
        return json.load(f)


def get_git_commits(limit: int = 50) -> list[Commit]:
    """Get recent git commits.

    Args:
        limit: Maximum number of commits to retrieve

    Returns:
        List of Commit objects
    """
    try:
        # Git log format: hash|author|date|message
        result = subprocess.run(
            [
                'git', 'log',
                f'-{limit}',
                '--pretty=format:%H|%an|%ai|%s',
                '--no-merges'
            ],
            capture_output=True,
            text=True,
            check=True
        )

        commits = []
        for line in result.stdout.strip().split('\n'):
            if not line:
                continue

            parts = line.split('|', 3)
            if len(parts) != 4:
                continue

            hash_full, author, date_str, message = parts

            commits.append(Commit(
                hash=hash_full,
                short_hash=hash_full[:7],
                author=author,
                date=date_str,
                message=message
            ))

        return commits

    except subprocess.CalledProcessError as e:
        print(f"Warning: Could not get git log: {e}")
        return []
    except FileNotFoundError:
        print("Warning: git not found")
        return []


def format_date(date_str: str) -> str:
    """Format ISO date to readable format."""
    try:
        dt = datetime.fromisoformat(date_str)
        return dt.strftime('%B %d, %Y at %H:%M')
    except Exception:
        return date_str


def group_by_category(tools: list[dict]) -> dict[Optional[str], list[dict]]:
    """Group tools by category.

    Args:
        tools: List of tool dictionaries

    Returns:
        Dictionary mapping category to list of tools
    """
    grouped = defaultdict(list)
    for tool in tools:
        category = tool.get('category') or 'Uncategorized'
        grouped[category].append(tool)

    return dict(grouped)


def generate_tool_html(tool: dict) -> str:
    """Generate HTML for a single tool."""
    tags_html = ""
    if tool.get('tags'):
        tags = ' '.join(f'<span class="tag">{tag}</span>' for tag in tool['tags'])
        tags_html = f'<div class="tags">{tags}</div>'

    return f"""
    <div class="tool">
        <h2><a href="{tool['url']}">{tool['title']}</a></h2>
        <p class="tool-description">{tool['description']}</p>
        {tags_html}
    </div>
"""


def generate_index_html(config: dict, tools: list[dict], commits: list[Commit]) -> str:
    """Generate complete index HTML."""
    site_title = config.get('title', 'Tools')
    site_description = config.get('description', 'A collection of tools')
    categories_enabled = config.get('categories_enabled', False)
    repo_url = config.get('repo_url')

    # Generate tools HTML
    tools_html = []

    if categories_enabled and any(t.get('category') for t in tools):
        # Group by category
        grouped = group_by_category(tools)

        for category, category_tools in sorted(grouped.items()):
            tools_html.append(f'<h2 class="category">{category}</h2>')
            tools_html.extend(generate_tool_html(t) for t in category_tools)
    else:
        # Flat list
        tools_html.extend(generate_tool_html(t) for t in tools)

    tools_section = ''.join(tools_html) if tools else '<p>No tools available yet.</p>'

    # Generate colophon HTML
    commit_html = []
    for commit in commits:
        commit_link = f'<code>{commit.short_hash}</code>'
        if repo_url:
            commit_link = f'<a href="{repo_url}/commit/{commit.hash}">{commit_link}</a>'

        commit_html.append(f"""
        <div class="commit">
            <div class="commit-header">
                {commit_link} &mdash; <span class="author">{commit.author}</span>
            </div>
            <div class="message">{commit.message}</div>
            <div class="date">{format_date(commit.date)}</div>
        </div>""")

    colophon_content = ''.join(commit_html) if commits else '<p>No git history available.</p>'

    return f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{site_title}</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif;
            line-height: 1.6;
            max-width: 800px;
            margin: 40px auto;
            padding: 0 20px;
            color: #24292e;
        }}
        h1 {{
            border-bottom: 1px solid #eaecef;
            padding-bottom: 10px;
        }}
        .description {{
            color: #586069;
            margin-bottom: 30px;
        }}
        .category {{
            margin-top: 40px;
            color: #0366d6;
            border-bottom: 1px solid #eaecef;
            padding-bottom: 5px;
        }}
        .tool {{
            margin: 20px 0;
            padding: 15px;
            border: 1px solid #e1e4e8;
            border-radius: 6px;
        }}
        .tool h2 {{
            margin: 0 0 8px 0;
            font-size: 1.25em;
        }}
        .tool a {{
            color: #0366d6;
            text-decoration: none;
        }}
        .tool a:hover {{
            text-decoration: underline;
        }}
        .tool-description {{
            color: #586069;
            margin: 5px 0 0 0;
        }}
        .tags {{
            margin-top: 10px;
        }}
        .tag {{
            display: inline-block;
            background: #f1f8ff;
            color: #0366d6;
            padding: 2px 8px;
            border-radius: 3px;
            font-size: 0.85em;
            margin-right: 5px;
        }}
        .footer {{
            margin-top: 60px;
            padding-top: 20px;
            border-top: 1px solid #eaecef;
        }}
        details {{
            margin-top: 20px;
        }}
        summary {{
            cursor: pointer;
            font-weight: 600;
            color: #0366d6;
            padding: 10px;
            border: 1px solid #e1e4e8;
            border-radius: 6px;
            background: #f6f8fa;
        }}
        summary:hover {{
            background: #e1e4e8;
        }}
        .commit {{
            margin: 15px 0;
            padding: 15px;
            border: 1px solid #e1e4e8;
            border-radius: 6px;
        }}
        .commit-header {{
            font-weight: 600;
            margin-bottom: 5px;
        }}
        .commit code {{
            background: #f6f8fa;
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 0.9em;
        }}
        .commit a {{
            color: #0366d6;
            text-decoration: none;
        }}
        .commit a:hover {{
            text-decoration: underline;
        }}
        .author {{
            color: #586069;
        }}
        .message {{
            margin: 8px 0;
        }}
        .date {{
            color: #586069;
            font-size: 0.9em;
        }}
    </style>
</head>
<body>
    <h1>{site_title}</h1>
    <p class="description">{site_description}</p>

{tools_section}

    <div class="footer">
        <details>
            <summary>Colophon</summary>
            <div style="margin-top: 15px;">
                {colophon_content}
            </div>
        </details>
    </div>
</body>
</html>
"""


def copy_assets():
    """Copy HTML tools and optional assets to dist/."""
    dist_dir = Path('dist')
    dist_dir.mkdir(exist_ok=True)

    # Copy all *.html files (except index.html)
    html_files = [f for f in Path('.').glob('*.html') if f.name != 'index.html']
    for html_file in html_files:
        shutil.copy2(html_file, dist_dir / html_file.name)

    # Copy assets directory if it exists
    assets_dir = Path('assets')
    if assets_dir.exists() and assets_dir.is_dir():
        dest_assets = dist_dir / 'assets'
        if dest_assets.exists():
            shutil.rmtree(dest_assets)
        shutil.copytree(assets_dir, dest_assets)
        print(f"  Copied assets/ directory")


def main():
    """Main entry point."""
    print("=== Building index ===")

    config = load_config()
    tools = load_tools()

    print(f"Loaded {len(tools)} tool(s)")

    # Get git commits for colophon
    commits = get_git_commits(limit=50)
    print(f"Found {len(commits)} commit(s)")

    # Generate index HTML
    html = generate_index_html(config, tools, commits)

    # Write to dist/index.html
    dist_dir = Path('dist')
    dist_dir.mkdir(exist_ok=True)

    index_path = dist_dir / 'index.html'
    index_path.write_text(html, encoding='utf-8')
    print(f"✓ Wrote {index_path}")

    # Copy assets
    copy_assets()

    print(f"✓ Build complete ({len(tools)} tool(s))")


if __name__ == '__main__':
    main()
